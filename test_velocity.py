data = {'gfp': [(74, 808), (75, 810), (75, 811), (80, 814), (73, 818), (69, 820), (68, 820), (69, 824), (67, 823), (64, 825), (68, 827), (72, 825), (72, 826), (69, 830), (70, 828), (66, 822), (60, 829), (64, 836), (62, 840), (65, 838), (65, 840), (71, 843), (57, 841), (60, 848), (60, 850), (59, 848), (55, 843), (63, 850), (59, 847), (65, 851), (64, 849), (68, 864), (65, 860), (66, 857), (65, 860), (64, 859), (61, 857), (65, 857), (66, 857), (64, 855), (64, 856), (68, 856), (71, 851), (71, 853), (73, 849), (73, 850), (77, 851), (79, 856), (74, 851), (74, 847), (68, 847), (68, 845), (69, 849), (73, 852), (77, 851), (73, 849), (75, 851), (80, 853), (69, 848), (74, 846), (67, 833), (75, 851), (77, 849), (80, 852), (65, 840), (77, 839), (74, 841), (75, 847), (75, 843), (71, 842), (81, 845), (80, 838), (80, 843), (79, 844), (70, 846), (70, 840), (68, 836), (69, 831), (67, 831), (67, 823), (65, 825), (80, 824), (75, 822), (79, 824), (76, 821), (66, 789), (71, 810), (73, 810), (74, 813), (73, 815), (75, 817), (73, 824), (73, 806), (59, 802), (63, 796), (64, 797), (68, 795), (73, 801), (77, 800), (82, 807), (89, 804), (86, 781), (88, 779), (90, 773), (90, 771), (91, 772), (92, 768), (98, 770), (100, 774), (103, 787), (108, 788), (106, 792), (114, 801), (117, 781), (122, 787), (126, 784), (124, 780), (126, 785), (122, 785), (122, 795)], 'marker': [(79, 812), (80, 814), (80, 813), (82, 819), (79, 818), (76, 821), (76, 820), (74, 825), (72, 822), (73, 824), (75, 824), (77, 827), (81, 826), (78, 827), (76, 827), (73, 822), (69, 827), (70, 835), (68, 837), (74, 837), (74, 839), (76, 842), (66, 842), (66, 846), (67, 846), (63, 846), (59, 840), (66, 844), (64, 842), (71, 846), (67, 844), (71, 858), (68, 855), (70, 854), (68, 854), (68, 854), (65, 852), (67, 851), (67, 851), (67, 851), (67, 851), (70, 851), (73, 845), (71, 846), (74, 841), (72, 841), (73, 841), (76, 845), (76, 845), (72, 838), (71, 843), (67, 839), (67, 840), (68, 840), (81, 848), (77, 846), (79, 848), (84, 850), (73, 845), (79, 844), (79, 844), (79, 848), (74, 842), (73, 842), (69, 835), (76, 835), (71, 833), (69, 837), (70, 828), (66, 830), (73, 830), (72, 826), (77, 834), (74, 834), (67, 837), (65, 828), (65, 826), (65, 819), (62, 820), (62, 812), (59, 811), (74, 808), (72, 808), (73, 811), (69, 806), (71, 798), (68, 798), (68, 797), (67, 798), (66, 801), (72, 805), (68, 812), (80, 815), (67, 809), (66, 789), (65, 788), (67, 788), (73, 792), (80, 794), (85, 794), (93, 793), (90, 789), (91, 786), (91, 786), (91, 786), (92, 783), (96, 782), (100, 780), (104, 784), (106, 792), (112, 793), (113, 797), (113, 792), (123, 782), (128, 788), (131, 788), (129, 784), (131, 789), (127, 789), (130, 788)], 'com': [(78.445945945945951, 812.91216216216219), (79.84210526315789, 814.84736842105258), (79.84974093264249, 814.88082901554401), (80.485148514851488, 819.21287128712868), (79.116504854368927, 819.87378640776694), (77.263888888888886, 821.4212962962963), (76.211009174311926, 821.17431192660547), (74.222222222222229, 825.03703703703707), (73.424369747899163, 823.60504201680669), (71.474178403755872, 824.68075117370893), (74.849765258215967, 825.72769953051647), (76.0, 826.0), (80.608333333333334, 826.8125), (77.94736842105263, 829.39097744360902), (74.437689969604861, 825.80547112462011), (74.398058252427177, 823.44660194174753), (68.305084745762713, 828.70847457627121), (73.138686131386862, 834.71167883211683), (68.029850746268664, 837.72388059701495), (76.05263157894737, 838.18045112781954), (74.24545454545455, 839.24545454545455), (77.726775956284158, 841.51912568306011), (67.930693069306926, 843.47524752475249), (67.186885245901635, 846.41311475409839), (66.866425992779781, 847.23104693140795), (64.145695364238406, 846.89072847682121), (62.160493827160494, 842.06172839506178), (67.142857142857139, 847.15679442508713), (64.55913978494624, 843.69175627240145), (67.540740740740745, 844.18765432098769), (66.146417445482868, 842.24922118380061), (68.817927170868344, 856.10084033613441), (66.118110236220474, 850.43307086614175), (69.58278145695364, 853.56291390728472), (62.936986301369863, 849.10410958904106), (65.168067226890756, 850.19327731092437), (62.940983606557381, 849.42295081967211), (61.5, 845.42171717171721), (69.068702290076331, 854.13740458015263), (68.359504132231407, 853.31818181818187), (67.336448598130843, 853.13551401869154), (65.947204968944106, 846.74223602484471), (68.881458966565347, 841.68996960486322), (71.280405405405403, 846.29054054054052), (72.175792507204619, 841.18731988472621), (70.933333333333337, 840.42807017543862), (71.873817034700323, 840.98422712933757), (77.771704180064305, 847.82958199356915), (62.676602086438152, 830.8360655737705), (71.771844660194176, 840.60194174757282), (65.935622317596568, 836.84549356223181), (74.04153354632588, 850.51757188498402), (61.991803278688522, 832.49180327868851), (67.31845238095238, 838.86607142857144), (73.860962566844918, 838.5828877005348), (68.266355140186917, 834.70093457943926), (77.236559139784944, 845.74193548387098), (83.400000000000006, 848.29090909090905), (62.620833333333337, 831.39166666666665), (77.87341772151899, 842.98734177215192), (69.241803278688522, 832.02868852459017), (77.742574257425744, 846.47524752475249), (61.801916932907346, 828.01277955271564), (70.265217391304347, 839.96086956521742), (59.933823529411768, 824.62867647058829), (62.718411552346566, 821.34296028880863), (65.263261296660119, 828.49115913555988), (67.41031390134529, 834.98430493273543), (74.069767441860463, 838.38081395348831), (58.472636815920396, 825.38308457711446), (65.411347517730491, 824.88888888888891), (79.185606060606062, 835.82196969696975), (72.364161849710982, 832.55298651252406), (68.839743589743591, 831.72222222222217), (60.700000000000003, 831.59333333333336), (61.355670103092784, 825.98969072164948), (62.80898876404494, 822.90262172284645), (63.364406779661017, 819.49152542372883), (58.378378378378379, 818.33333333333337), (64.380794701986758, 817.96357615894044), (62.765060240963855, 819.10843373493981), (77.277611940298513, 815.82388059701498), (75.205128205128204, 817.43589743589746), (76.954861111111114, 818.87847222222217), (75.669491525423723, 817.85028248587571), (70.393103448275866, 796.12413793103451), (73.300613496932513, 809.12883435582819), (69.818181818181813, 800.69377990430621), (78.203349282296642, 816.38038277511964), (68.807692307692307, 804.83333333333337), (86.392554991539768, 830.6649746192893), (73.47608695652174, 821.34347826086957), (78.10526315789474, 813.07894736842104), (66.079999999999998, 806.41999999999996), (65.114285714285714, 791.95714285714291), (64.405511811023615, 790.99606299212599), (67.069852941176464, 788.70588235294122), (72.961194029850745, 792.4417910447761), (79.678899082568805, 792.22477064220186), (85.831325301204814, 797.04819277108436), (93.59349593495935, 794.43495934959344), (90.506024096385545, 790.3373493975904), (92.92880258899676, 786.19093851132686), (93.181451612903231, 782.02016129032256), (92.970711297071134, 782.28033472803349), (91.39802631578948, 784.33881578947364), (96.613240418118465, 776.45993031358887), (99.838926174496649, 776.92281879194627), (104.00689655172414, 784.80689655172409), (107.74117647058823, 794.69411764705887), (113.54074074074074, 794.25925925925924), (113.05426356589147, 797.1317829457364), (114.25806451612902, 793.93951612903231), (123.35849056603773, 781.54716981132071), (129.11764705882354, 788.64705882352939), (132.37241379310345, 790.04137931034484), (130.744, 784.01599999999996), (131.53216374269005, 791.31578947368416), (128.38095238095238, 791.88095238095241), (129.93000000000001, 791.96500000000003)], 'dtc': [(78, 810), (82, 816), (81, 815), (81, 821), (80, 819), (79, 821), (77, 821), (74, 825), (74, 824), (70, 829), (76, 825), (76, 826), (81, 828), (79, 830), (77, 828), (75, 824), (70, 830), (72, 836), (70, 838), (76, 837), (73, 838), (74, 841), (69, 843), (68, 848), (68, 846), (65, 846), (57, 839), (69, 850), (66, 844), (72, 854), (68, 844), (71, 859), (69, 855), (70, 854), (69, 856), (69, 855), (66, 855), (68, 853), (66, 849), (65, 850), (67, 851), (70, 852), (71, 844), (70, 843), (73, 840), (71, 840), (71, 839), (75, 843), (76, 846), (71, 838), (70, 841), (66, 837), (66, 837), (67, 838), (80, 847), (76, 845), (78, 847), (79, 847), (72, 844), (78, 843), (78, 843), (78, 847), (72, 841), (71, 840), (67, 834), (74, 834), (71, 835), (68, 835), (67, 827), (68, 836), (72, 829), (70, 825), (75, 832), (73, 833), (65, 836), (63, 827), (64, 824), (63, 818), (61, 819), (60, 811), (58, 809), (74, 808), (71, 807), (72, 809), (69, 804), (70, 796), (67, 795), (67, 796), (66, 796), (65, 800), (71, 804), (68, 814), (79, 813), (66, 807), (65, 787), (64, 787), (69, 787), (74, 792), (79, 793), (87, 794), (95, 792), (91, 790), (94, 786), (95, 786), (94, 786), (93, 783), (95, 781), (101, 780), (102, 783), (106, 790), (110, 792), (112, 796), (115, 794), (122, 780), (127, 787), (130, 786), (127, 783), (130, 787), (125, 788), (129, 787)]}

rmop, cmop = 0.569607421875, 0.57016474609375

import math
import matplotlib.pyplot as plt
import numpy as np

# com
com_r = [lm[0] for lm in data['com']]
com_c = [lm[1] for lm in data['com']]

# dtc
dtc_r = [lm[0] for lm in data['dtc']]
dtc_c = [lm[1] for lm in data['dtc']]

# marker
marker_r = [lm[0] for lm in data['marker']]
marker_c = [lm[1] for lm in data['marker']]

# gfp
gfp_r = [lm[0] for lm in data['gfp']]
gfp_c = [lm[1] for lm in data['gfp']]

#### VELOCITIES
# com
com_v = []
for i in range(len(com_r)):
	if i > 0:
		print(i)
		print('r', com_r[i], com_r[i-1], com_r[i] - com_r[i-1], (com_r[i] - com_r[i-1]) * rmop)
		print('c', com_c[i], com_c[i-1], com_c[i] - com_c[i-1], (com_c[i] - com_c[i-1]) * cmop)
		print('v', math.sqrt(((com_c[i] - com_c[i-1]) * cmop)**2 + ((com_r[i] - com_r[i-1]) * rmop)**2))

		com_v.append(math.sqrt(((com_r[i] - com_r[i-1]) * rmop)**2 + ((com_c[i] - com_c[i-1]) * cmop)**2))
	else:
		com_v.append(0)

print(com_v)

# dtc
dtc_v = []
for i in range(len(dtc_r)):
	if i > 0:
		dtc_v.append(math.sqrt(((dtc_r[i] - dtc_r[i-1]) * rmop)**2 + ((dtc_c[i] - dtc_c[i-1]) * cmop)**2))
	else:
		dtc_v.append(0)

print(dtc_v)

# marker
marker_v = []
for i in range(len(marker_r)):
	if i > 0:
		marker_v.append(math.sqrt(((marker_r[i] - marker_r[i-1]) * rmop)**2 + ((marker_c[i] - marker_c[i-1]) * cmop)**2))
	else:
		marker_v.append(0)

print(marker_v)

# gfp
gfp_v = []
for i in range(len(gfp_r)):
	if i > 0:
		gfp_v.append(math.sqrt(((gfp_r[i] - gfp_r[i-1]) * rmop)**2 + ((gfp_c[i] - gfp_c[i-1]) * cmop)**2))
	else:
		gfp_v.append(0)

print(gfp_v)

tpf = 7.645349979400635
plt.plot(np.array(com_v) / tpf, label='com')
plt.plot(np.array(dtc_v) / tpf, label='dtc')
plt.plot(np.array(marker_v) / tpf, label='marker')
plt.plot(np.array(gfp_v) / tpf, label='gfp')

plt.legend()
plt.show()
